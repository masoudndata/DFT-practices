# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HWmQHiY4xhRkpqNZV4whSN9j_zAUKuS9
"""

import matplotlib.pyplot as plt
import scipy
import numpy as np
import tensorflow as tf
from __future__ import division
import sklearn
import torch
import math

#define my space
psi = 6
k = 30; 
k3 = k**3;

p = np.linspace (-5,5,k)

[x,y,z] = np.meshgrid(p,p,p)

h = p[2]-p[1]

#squeeze it and actualy make it 1D
lx = x.size
ly = y.size
lz = z.size
x = np.reshape(x,(lx, 1))
y = np.reshape(y,(ly, 1))
z = np.reshape(z,(lz, 1))

"""
# defining kinetic energy with finit difference and in 1D"""

from scipy.sparse import spdiags

from scipy.sparse import linalg

diag1 = [1]*10000
diag2 = [-2]*10000
offset = [-1,0,1]
D = spdiags([diag1, diag2, diag1], offset, k, k).toarray()/(h**2)
len(D.shape)

I = scipy.sparse.eye(k)
I.shape

from scipy.sparse import kron
D3 = kron(kron(D,I),I) + kron(kron(I,D),I) + kron(kron(I,I),D)

#D3 = D3.numpy()
#D3 = np.array(D3, dtype='int32')
#D3 = torch.from_numpy(D3)

#D3 = D3.astype(dtype='uint8')

#D3 = torch.FloatTensor(D3)
#res = ini_array.astype(np.float)
#D3 = np.vstack(D3[:, 1]).astype(np.float)
#D3 = torch.from_numpy(D3)

x1= np.power(x,2)
y1 = np.power(y,2)
z1 = np.power(z,2)
F = (x1 + y1 + z1)
R = np.sqrt(F)

psi = -6.0
Vext = psi/ R
Vext = np.array(Vext)

SP = spdiags(Vext.T,0,k3,k3)

Vtot = Vext #initial guess
R2 = -R**2
nR = np.true_divide(R2, 2)
ncomp = math.exp(nR)  #Gaussian distribution

ncomp = -2*ncomp/sum(ncomp)/h**3;
erg = scipy.special.erf(np.true_divide(R,np.sqrt(2)))
ncomppot = np.true_divide(-2,R*erg)
While True:
  [PSI,E] = scipy.sparse.linalg.eigsh(-0.5*D3+SP,k=1) #Wave function
  PSI = np.true_divide(PSI, h**(3/2))
  #electron density
  n =  np.power(2*PSI,2) #C 6
  #exchange potential
  Vx = -(3/pi)**(1/3)*n.**(1/3)
  #Hartree potential (poisson equation) using conic gradiant solver
  #D3 solving with cgs vh= -4*pi*n  
  Vh = cgs(D3, -4*np.pi*(n+ncomp), 1e-7, 400) - ncomppot
  Vtot = Vx + Vh + Vext
  #clculate total energy
  #start with kinetic energy
  T = 6*PSI1*(-0.5*D3)*PSI *h**3
  Eext = sum(n.*Vext)*h**3
  Eh = 0.5 * sum(n.*Vh)*(h**3)
  Ex = sum(-(3/4)*(3/pi)**(1/3)*n.**(4/3))*h**3
  break

PSI = PSI/h**(3/2)

sum(n)*(h**3) = 6

#electron density
n = 6*PSI.**2

#exchange potential
Vx = -(3/pi)**(1/3*n).**(1/3)

#Hartree potential (poisson equation) using conic gradiant solver
#Vh = cgs(D3, -4*np.pi*n, 1e-7, 400)
for i in nrange(0,20):
  np.linalg.solve(D3,-4*np.pi*n)

Vtot = Vx + Vh + Vext;

#clculate total energy
#start with kinetic energy
T = 6*PSI1*(-0.5*D3)*PSI *h**3

Eext = sum(n.*Vext)*h**3

Eh = 0.5 * sum(n.*Vh)*(h**3)

Ex = sum(-(3/4)*(3/pi)**(1/3)*n.**(4/3))*h**3

5/2

